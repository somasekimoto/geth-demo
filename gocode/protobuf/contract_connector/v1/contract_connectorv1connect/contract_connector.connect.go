// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: protobuf/contract_connector/v1/contract_connector.proto

package contract_connectorv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/somasekimoto/geth-demo/gocode/protobuf/contract_connector/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ContractConnectorServiceName is the fully-qualified name of the ContractConnectorService service.
	ContractConnectorServiceName = "protobuf.contract_connector.v1.ContractConnectorService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ContractConnectorServiceContractConnectProcedure is the fully-qualified name of the
	// ContractConnectorService's ContractConnect RPC.
	ContractConnectorServiceContractConnectProcedure = "/protobuf.contract_connector.v1.ContractConnectorService/ContractConnect"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	contractConnectorServiceServiceDescriptor               = v1.File_protobuf_contract_connector_v1_contract_connector_proto.Services().ByName("ContractConnectorService")
	contractConnectorServiceContractConnectMethodDescriptor = contractConnectorServiceServiceDescriptor.Methods().ByName("ContractConnect")
)

// ContractConnectorServiceClient is a client for the
// protobuf.contract_connector.v1.ContractConnectorService service.
type ContractConnectorServiceClient interface {
	ContractConnect(context.Context, *connect.Request[v1.ContractConnectRequest]) (*connect.Response[v1.ContractConnectResponse], error)
}

// NewContractConnectorServiceClient constructs a client for the
// protobuf.contract_connector.v1.ContractConnectorService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewContractConnectorServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ContractConnectorServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &contractConnectorServiceClient{
		contractConnect: connect.NewClient[v1.ContractConnectRequest, v1.ContractConnectResponse](
			httpClient,
			baseURL+ContractConnectorServiceContractConnectProcedure,
			connect.WithSchema(contractConnectorServiceContractConnectMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// contractConnectorServiceClient implements ContractConnectorServiceClient.
type contractConnectorServiceClient struct {
	contractConnect *connect.Client[v1.ContractConnectRequest, v1.ContractConnectResponse]
}

// ContractConnect calls protobuf.contract_connector.v1.ContractConnectorService.ContractConnect.
func (c *contractConnectorServiceClient) ContractConnect(ctx context.Context, req *connect.Request[v1.ContractConnectRequest]) (*connect.Response[v1.ContractConnectResponse], error) {
	return c.contractConnect.CallUnary(ctx, req)
}

// ContractConnectorServiceHandler is an implementation of the
// protobuf.contract_connector.v1.ContractConnectorService service.
type ContractConnectorServiceHandler interface {
	ContractConnect(context.Context, *connect.Request[v1.ContractConnectRequest]) (*connect.Response[v1.ContractConnectResponse], error)
}

// NewContractConnectorServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewContractConnectorServiceHandler(svc ContractConnectorServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	contractConnectorServiceContractConnectHandler := connect.NewUnaryHandler(
		ContractConnectorServiceContractConnectProcedure,
		svc.ContractConnect,
		connect.WithSchema(contractConnectorServiceContractConnectMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/protobuf.contract_connector.v1.ContractConnectorService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ContractConnectorServiceContractConnectProcedure:
			contractConnectorServiceContractConnectHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedContractConnectorServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedContractConnectorServiceHandler struct{}

func (UnimplementedContractConnectorServiceHandler) ContractConnect(context.Context, *connect.Request[v1.ContractConnectRequest]) (*connect.Response[v1.ContractConnectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("protobuf.contract_connector.v1.ContractConnectorService.ContractConnect is not implemented"))
}
